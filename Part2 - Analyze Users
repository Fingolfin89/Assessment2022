{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "        <script type=\"text/javascript\">\n",
       "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
       "        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
       "        if (typeof require !== 'undefined') {\n",
       "        require.undef(\"plotly\");\n",
       "        requirejs.config({\n",
       "            paths: {\n",
       "                'plotly': ['https://cdn.plot.ly/plotly-2.12.1.min']\n",
       "            }\n",
       "        });\n",
       "        require(['plotly'], function(Plotly) {\n",
       "            window._Plotly = Plotly;\n",
       "        });\n",
       "        }\n",
       "        </script>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "from datetime import datetime, timezone\n",
    "import datetime as dt\n",
    "import chart_studio.plotly as py\n",
    "import plotly.graph_objs as go\n",
    "from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n",
    "init_notebook_mode(connected=True)\n",
    "import seaborn as sns\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "from mlxtend.frequent_patterns import apriori\n",
    "from mlxtend.frequent_patterns import association_rules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Read Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir(\"C:/Users/Θανάσης/Desktop/Efood\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('Assessment exercise dataset - orders.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_timestamp</th>\n",
       "      <th>city</th>\n",
       "      <th>cuisine</th>\n",
       "      <th>paid_cash</th>\n",
       "      <th>amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7322173742136</td>\n",
       "      <td>94223136441</td>\n",
       "      <td>2022-01-18 15:41:28 UTC</td>\n",
       "      <td>Αίγιο</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>3.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7210978616924</td>\n",
       "      <td>204794985423</td>\n",
       "      <td>2022-01-02 17:50:50 UTC</td>\n",
       "      <td>Αγρίνιο</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7221232906132</td>\n",
       "      <td>12703920390</td>\n",
       "      <td>2022-01-04 08:37:12 UTC</td>\n",
       "      <td>Αγρίνιο</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>1.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7399605199800</td>\n",
       "      <td>673310109528</td>\n",
       "      <td>2022-01-31 11:33:05 UTC</td>\n",
       "      <td>Λιβαδειά</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7264221279744</td>\n",
       "      <td>673310109528</td>\n",
       "      <td>2022-01-10 11:18:28 UTC</td>\n",
       "      <td>Λιβαδειά</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        order_id       user_id          order_timestamp      city    cuisine  \\\n",
       "0  7322173742136   94223136441  2022-01-18 15:41:28 UTC     Αίγιο  Breakfast   \n",
       "1  7210978616924  204794985423  2022-01-02 17:50:50 UTC   Αγρίνιο  Breakfast   \n",
       "2  7221232906132   12703920390  2022-01-04 08:37:12 UTC   Αγρίνιο  Breakfast   \n",
       "3  7399605199800  673310109528  2022-01-31 11:33:05 UTC  Λιβαδειά  Breakfast   \n",
       "4  7264221279744  673310109528  2022-01-10 11:18:28 UTC  Λιβαδειά  Breakfast   \n",
       "\n",
       "   paid_cash  amount  \n",
       "0       True     3.6  \n",
       "1       True     1.9  \n",
       "2       True     1.7  \n",
       "3       True     3.0  \n",
       "4       True     3.0  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fix the type of timestamp variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "order_id             int64\n",
       "user_id              int64\n",
       "order_timestamp     object\n",
       "city                object\n",
       "cuisine             object\n",
       "paid_cash             bool\n",
       "amount             float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['order_timestamp'] = pd.to_datetime(data['order_timestamp'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['order_timestamp'] = data['order_timestamp'].dt.tz_localize(None) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Add day names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_timestamp</th>\n",
       "      <th>city</th>\n",
       "      <th>cuisine</th>\n",
       "      <th>paid_cash</th>\n",
       "      <th>amount</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7322173742136</td>\n",
       "      <td>94223136441</td>\n",
       "      <td>2022-01-18 15:41:28</td>\n",
       "      <td>Αίγιο</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>3.6</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7210978616924</td>\n",
       "      <td>204794985423</td>\n",
       "      <td>2022-01-02 17:50:50</td>\n",
       "      <td>Αγρίνιο</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Sunday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7221232906132</td>\n",
       "      <td>12703920390</td>\n",
       "      <td>2022-01-04 08:37:12</td>\n",
       "      <td>Αγρίνιο</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>1.7</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7399605199800</td>\n",
       "      <td>673310109528</td>\n",
       "      <td>2022-01-31 11:33:05</td>\n",
       "      <td>Λιβαδειά</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7264221279744</td>\n",
       "      <td>673310109528</td>\n",
       "      <td>2022-01-10 11:18:28</td>\n",
       "      <td>Λιβαδειά</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        order_id       user_id     order_timestamp      city    cuisine  \\\n",
       "0  7322173742136   94223136441 2022-01-18 15:41:28     Αίγιο  Breakfast   \n",
       "1  7210978616924  204794985423 2022-01-02 17:50:50   Αγρίνιο  Breakfast   \n",
       "2  7221232906132   12703920390 2022-01-04 08:37:12   Αγρίνιο  Breakfast   \n",
       "3  7399605199800  673310109528 2022-01-31 11:33:05  Λιβαδειά  Breakfast   \n",
       "4  7264221279744  673310109528 2022-01-10 11:18:28  Λιβαδειά  Breakfast   \n",
       "\n",
       "   paid_cash  amount      day  \n",
       "0       True     3.6  Tuesday  \n",
       "1       True     1.9   Sunday  \n",
       "2       True     1.7  Tuesday  \n",
       "3       True     3.0   Monday  \n",
       "4       True     3.0   Monday  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_date = data['order_timestamp']\n",
    "day = pd.to_datetime(my_date).dt.day_name()\n",
    "data['day'] = day\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "order_id                    int64\n",
       "user_id                     int64\n",
       "order_timestamp    datetime64[ns]\n",
       "city                       object\n",
       "cuisine                    object\n",
       "paid_cash                    bool\n",
       "amount                    float64\n",
       "day                        object\n",
       "dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check unique values of key columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "121943"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.user_id.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "46"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.city.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "534270"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.order_id.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "order_id :  534270\n",
      "user_id :  121943\n",
      "order_timestamp :  457853\n",
      "city :  46\n",
      "cuisine :  4\n",
      "paid_cash :  2\n",
      "amount :  2061\n",
      "day :  7\n"
     ]
    }
   ],
   "source": [
    "def unique_counts(data):\n",
    "   for i in data.columns:\n",
    "       count = data[i].nunique()\n",
    "       print(i, \": \", count)\n",
    "unique_counts(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Drop Duplicates if needed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "city_user_order=data[['city','user_id','order_id']].drop_duplicates()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check top cities and users per order"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>32224</th>\n",
       "      <td>154559060124</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21549</th>\n",
       "      <td>104460666828</td>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24847</th>\n",
       "      <td>119884693362</td>\n",
       "      <td>105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5968</th>\n",
       "      <td>32214575190</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54302</th>\n",
       "      <td>247344644274</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            user_id  order_id\n",
       "32224  154559060124       135\n",
       "21549  104460666828       107\n",
       "24847  119884693362       105\n",
       "5968    32214575190       100\n",
       "54302  247344644274        88"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "city_user_order.groupby(['user_id'])['order_id'].aggregate('count').reset_index().sort_values('order_id', ascending=False).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\Anaconda\\lib\\site-packages\\ipykernel_launcher.py:1: FutureWarning:\n",
      "\n",
      "Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>city</th>\n",
       "      <th>order_id</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Λάρισα</td>\n",
       "      <td>84943</td>\n",
       "      <td>22088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Βόλος</td>\n",
       "      <td>77529</td>\n",
       "      <td>17499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Ιωάννινα</td>\n",
       "      <td>67972</td>\n",
       "      <td>16861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>50730</td>\n",
       "      <td>11155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Ξάνθη</td>\n",
       "      <td>49401</td>\n",
       "      <td>9227</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        city  order_id  user_id\n",
       "27    Λάρισα     84943    22088\n",
       "15     Βόλος     77529    17499\n",
       "26  Ιωάννινα     67972    16861\n",
       "43     Ρόδος     50730    11155\n",
       "40     Ξάνθη     49401     9227"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "city_user_order.groupby(['city',])['order_id','user_id'].aggregate('nunique').reset_index().sort_values('order_id', ascending=False).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Check for Null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "order_id           0\n",
       "user_id            0\n",
       "order_timestamp    0\n",
       "city               0\n",
       "cuisine            0\n",
       "paid_cash          0\n",
       "amount             0\n",
       "day                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum(axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RFM Customer Segmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2022-01-31 23:59:53')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['order_timestamp'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.datetime(2022, 2, 1, 0, 0)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "next_date = dt.datetime(2022,2,1)\n",
    "next_date"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create a RFM table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfmTable = data.groupby('user_id').agg({'order_timestamp': lambda x: (next_date - x.max()).days, 'order_id': lambda x: len(x), 'amount': lambda x: x.sum()})\n",
    "rfmTable['order_timestamp'] = rfmTable['order_timestamp'].astype(int)\n",
    "rfmTable.rename(columns={'order_timestamp': 'recency', \n",
    "                         'order_id': 'frequency', \n",
    "                         'amount': 'monetary_value'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>recency</th>\n",
       "      <th>frequency</th>\n",
       "      <th>monetary_value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44118921</th>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>33.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108938802</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>44.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110361993</th>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>137.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138437670</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144777339</th>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>60.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           recency  frequency  monetary_value\n",
       "user_id                                      \n",
       "44118921        26          1            33.3\n",
       "108938802        4          3            44.2\n",
       "110361993        7         11           137.0\n",
       "138437670        3          1             5.5\n",
       "144777339        0         14            60.8"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfmTable.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Let’s check the details of the customer with the highest monetary value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>recency</th>\n",
       "      <th>frequency</th>\n",
       "      <th>monetary_value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>485537911656</th>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>1351.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154559060124</th>\n",
       "      <td>0</td>\n",
       "      <td>135</td>\n",
       "      <td>945.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>629495492640</th>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>863.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>119884693362</th>\n",
       "      <td>0</td>\n",
       "      <td>105</td>\n",
       "      <td>839.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>589547556318</th>\n",
       "      <td>0</td>\n",
       "      <td>52</td>\n",
       "      <td>796.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              recency  frequency  monetary_value\n",
       "user_id                                         \n",
       "485537911656        0         38         1351.50\n",
       "154559060124        0        135          945.40\n",
       "629495492640        0         24          863.05\n",
       "119884693362        0        105          839.95\n",
       "589547556318        0         52          796.00"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfmTable.sort_values(by=['monetary_value'], ascending=False).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_timestamp</th>\n",
       "      <th>city</th>\n",
       "      <th>cuisine</th>\n",
       "      <th>paid_cash</th>\n",
       "      <th>amount</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>211386</th>\n",
       "      <td>7357172664748</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-23 13:41:23</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>37.0</td>\n",
       "      <td>Sunday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>211391</th>\n",
       "      <td>7394452826884</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-30 16:23:56</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>40.0</td>\n",
       "      <td>Sunday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229648</th>\n",
       "      <td>7308190003420</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-16 15:35:49</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>49.0</td>\n",
       "      <td>Sunday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229652</th>\n",
       "      <td>7243436617364</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-07 13:40:51</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>37.0</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229654</th>\n",
       "      <td>7364157236540</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-24 17:20:44</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>30.0</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>229660</th>\n",
       "      <td>7300487123904</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-15 15:37:52</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>39.5</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236357</th>\n",
       "      <td>7370888359932</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-26 19:14:35</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>25.0</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>236358</th>\n",
       "      <td>7252427568260</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-08 18:23:29</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>30.0</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247823</th>\n",
       "      <td>7349689848360</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-22 13:31:39</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>48.0</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>256932</th>\n",
       "      <td>7211833349804</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-02 19:46:40</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>32.0</td>\n",
       "      <td>Sunday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>273377</th>\n",
       "      <td>7344131637552</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-21 18:26:23</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Meat</td>\n",
       "      <td>False</td>\n",
       "      <td>40.5</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>281638</th>\n",
       "      <td>7271309852776</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-11 13:24:15</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>36.5</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>281642</th>\n",
       "      <td>7315472333384</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-17 15:38:25</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>True</td>\n",
       "      <td>30.0</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>290527</th>\n",
       "      <td>7342958550176</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-21 15:27:33</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>True</td>\n",
       "      <td>35.0</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>290528</th>\n",
       "      <td>7292606772244</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-14 15:22:57</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>59.5</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>290531</th>\n",
       "      <td>7321374709640</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-18 13:53:24</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>30.5</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>290538</th>\n",
       "      <td>7380412630352</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-28 16:57:50</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>57.5</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>290542</th>\n",
       "      <td>7266361170804</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-10 17:09:14</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>32.0</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299594</th>\n",
       "      <td>7374068175996</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-27 13:46:30</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>45.5</td>\n",
       "      <td>Thursday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299598</th>\n",
       "      <td>7229941247496</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-05 14:38:22</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>32.0</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>299600</th>\n",
       "      <td>7336927060896</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-20 18:19:29</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>True</td>\n",
       "      <td>28.0</td>\n",
       "      <td>Thursday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308421</th>\n",
       "      <td>7369515281376</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-26 14:13:38</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Meat</td>\n",
       "      <td>False</td>\n",
       "      <td>23.2</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>323942</th>\n",
       "      <td>7258196549088</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-09 14:38:07</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>35.0</td>\n",
       "      <td>Sunday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>323946</th>\n",
       "      <td>7223593297300</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-04 15:12:45</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>32.0</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>323947</th>\n",
       "      <td>7285877163716</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-13 16:12:06</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>25.0</td>\n",
       "      <td>Thursday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>323949</th>\n",
       "      <td>7278318545864</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-12 14:31:57</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>False</td>\n",
       "      <td>41.0</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>323951</th>\n",
       "      <td>7328481490172</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-19 14:33:31</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Italian</td>\n",
       "      <td>True</td>\n",
       "      <td>37.0</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>348003</th>\n",
       "      <td>7403284920984</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-31 20:52:58</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Meat</td>\n",
       "      <td>True</td>\n",
       "      <td>18.8</td>\n",
       "      <td>Monday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>370639</th>\n",
       "      <td>7231836051040</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-05 19:42:23</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Meat</td>\n",
       "      <td>False</td>\n",
       "      <td>31.6</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>385851</th>\n",
       "      <td>7224671472620</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-04 18:19:50</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Meat</td>\n",
       "      <td>False</td>\n",
       "      <td>23.6</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416662</th>\n",
       "      <td>7366511451724</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-25 15:55:02</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Meat</td>\n",
       "      <td>False</td>\n",
       "      <td>28.6</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>423907</th>\n",
       "      <td>7322610139496</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-18 16:52:57</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Meat</td>\n",
       "      <td>False</td>\n",
       "      <td>41.2</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>469973</th>\n",
       "      <td>7213603351860</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-02 22:30:53</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Street food</td>\n",
       "      <td>False</td>\n",
       "      <td>37.5</td>\n",
       "      <td>Sunday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>483197</th>\n",
       "      <td>7329990498640</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-19 18:23:54</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Street food</td>\n",
       "      <td>True</td>\n",
       "      <td>37.0</td>\n",
       "      <td>Wednesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502138</th>\n",
       "      <td>7245164465416</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-07 17:56:12</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Street food</td>\n",
       "      <td>False</td>\n",
       "      <td>31.5</td>\n",
       "      <td>Friday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>515612</th>\n",
       "      <td>7392963045536</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-30 13:23:59</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Street food</td>\n",
       "      <td>False</td>\n",
       "      <td>32.5</td>\n",
       "      <td>Sunday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>523290</th>\n",
       "      <td>7386234194440</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-29 14:14:57</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Meat</td>\n",
       "      <td>False</td>\n",
       "      <td>36.5</td>\n",
       "      <td>Saturday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>531099</th>\n",
       "      <td>7286972264728</td>\n",
       "      <td>485537911656</td>\n",
       "      <td>2022-01-13 19:16:27</td>\n",
       "      <td>Ρόδος</td>\n",
       "      <td>Street food</td>\n",
       "      <td>False</td>\n",
       "      <td>45.0</td>\n",
       "      <td>Thursday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             order_id       user_id     order_timestamp   city      cuisine  \\\n",
       "211386  7357172664748  485537911656 2022-01-23 13:41:23  Ρόδος      Italian   \n",
       "211391  7394452826884  485537911656 2022-01-30 16:23:56  Ρόδος      Italian   \n",
       "229648  7308190003420  485537911656 2022-01-16 15:35:49  Ρόδος      Italian   \n",
       "229652  7243436617364  485537911656 2022-01-07 13:40:51  Ρόδος      Italian   \n",
       "229654  7364157236540  485537911656 2022-01-24 17:20:44  Ρόδος      Italian   \n",
       "229660  7300487123904  485537911656 2022-01-15 15:37:52  Ρόδος      Italian   \n",
       "236357  7370888359932  485537911656 2022-01-26 19:14:35  Ρόδος      Italian   \n",
       "236358  7252427568260  485537911656 2022-01-08 18:23:29  Ρόδος      Italian   \n",
       "247823  7349689848360  485537911656 2022-01-22 13:31:39  Ρόδος      Italian   \n",
       "256932  7211833349804  485537911656 2022-01-02 19:46:40  Ρόδος      Italian   \n",
       "273377  7344131637552  485537911656 2022-01-21 18:26:23  Ρόδος         Meat   \n",
       "281638  7271309852776  485537911656 2022-01-11 13:24:15  Ρόδος      Italian   \n",
       "281642  7315472333384  485537911656 2022-01-17 15:38:25  Ρόδος      Italian   \n",
       "290527  7342958550176  485537911656 2022-01-21 15:27:33  Ρόδος      Italian   \n",
       "290528  7292606772244  485537911656 2022-01-14 15:22:57  Ρόδος      Italian   \n",
       "290531  7321374709640  485537911656 2022-01-18 13:53:24  Ρόδος      Italian   \n",
       "290538  7380412630352  485537911656 2022-01-28 16:57:50  Ρόδος      Italian   \n",
       "290542  7266361170804  485537911656 2022-01-10 17:09:14  Ρόδος      Italian   \n",
       "299594  7374068175996  485537911656 2022-01-27 13:46:30  Ρόδος      Italian   \n",
       "299598  7229941247496  485537911656 2022-01-05 14:38:22  Ρόδος      Italian   \n",
       "299600  7336927060896  485537911656 2022-01-20 18:19:29  Ρόδος      Italian   \n",
       "308421  7369515281376  485537911656 2022-01-26 14:13:38  Ρόδος         Meat   \n",
       "323942  7258196549088  485537911656 2022-01-09 14:38:07  Ρόδος      Italian   \n",
       "323946  7223593297300  485537911656 2022-01-04 15:12:45  Ρόδος      Italian   \n",
       "323947  7285877163716  485537911656 2022-01-13 16:12:06  Ρόδος      Italian   \n",
       "323949  7278318545864  485537911656 2022-01-12 14:31:57  Ρόδος      Italian   \n",
       "323951  7328481490172  485537911656 2022-01-19 14:33:31  Ρόδος      Italian   \n",
       "348003  7403284920984  485537911656 2022-01-31 20:52:58  Ρόδος         Meat   \n",
       "370639  7231836051040  485537911656 2022-01-05 19:42:23  Ρόδος         Meat   \n",
       "385851  7224671472620  485537911656 2022-01-04 18:19:50  Ρόδος         Meat   \n",
       "416662  7366511451724  485537911656 2022-01-25 15:55:02  Ρόδος         Meat   \n",
       "423907  7322610139496  485537911656 2022-01-18 16:52:57  Ρόδος         Meat   \n",
       "469973  7213603351860  485537911656 2022-01-02 22:30:53  Ρόδος  Street food   \n",
       "483197  7329990498640  485537911656 2022-01-19 18:23:54  Ρόδος  Street food   \n",
       "502138  7245164465416  485537911656 2022-01-07 17:56:12  Ρόδος  Street food   \n",
       "515612  7392963045536  485537911656 2022-01-30 13:23:59  Ρόδος  Street food   \n",
       "523290  7386234194440  485537911656 2022-01-29 14:14:57  Ρόδος         Meat   \n",
       "531099  7286972264728  485537911656 2022-01-13 19:16:27  Ρόδος  Street food   \n",
       "\n",
       "        paid_cash  amount        day  \n",
       "211386      False    37.0     Sunday  \n",
       "211391      False    40.0     Sunday  \n",
       "229648      False    49.0     Sunday  \n",
       "229652      False    37.0     Friday  \n",
       "229654      False    30.0     Monday  \n",
       "229660      False    39.5   Saturday  \n",
       "236357      False    25.0  Wednesday  \n",
       "236358      False    30.0   Saturday  \n",
       "247823      False    48.0   Saturday  \n",
       "256932      False    32.0     Sunday  \n",
       "273377      False    40.5     Friday  \n",
       "281638      False    36.5    Tuesday  \n",
       "281642       True    30.0     Monday  \n",
       "290527       True    35.0     Friday  \n",
       "290528      False    59.5     Friday  \n",
       "290531      False    30.5    Tuesday  \n",
       "290538      False    57.5     Friday  \n",
       "290542      False    32.0     Monday  \n",
       "299594      False    45.5   Thursday  \n",
       "299598      False    32.0  Wednesday  \n",
       "299600       True    28.0   Thursday  \n",
       "308421      False    23.2  Wednesday  \n",
       "323942      False    35.0     Sunday  \n",
       "323946      False    32.0    Tuesday  \n",
       "323947      False    25.0   Thursday  \n",
       "323949      False    41.0  Wednesday  \n",
       "323951       True    37.0  Wednesday  \n",
       "348003       True    18.8     Monday  \n",
       "370639      False    31.6  Wednesday  \n",
       "385851      False    23.6    Tuesday  \n",
       "416662      False    28.6    Tuesday  \n",
       "423907      False    41.2    Tuesday  \n",
       "469973      False    37.5     Sunday  \n",
       "483197       True    37.0  Wednesday  \n",
       "502138      False    31.5     Friday  \n",
       "515612      False    32.5     Sunday  \n",
       "523290      False    36.5   Saturday  \n",
       "531099      False    45.0   Thursday  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer1 = data[data['user_id'] == 485537911656]\n",
    "customer1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35.565789473684205"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer1[\"amount\"].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Split the metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "quantiles = rfmTable.quantile(q=[0.25,0.5,0.75])\n",
    "quantiles = quantiles.to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "segmented_rfm = rfmTable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The lowest recency, highest frequency and monetary amounts are our best customers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def RScore(x,p,d):\n",
    "    if x <= d[p][0.25]:\n",
    "        return 1\n",
    "    elif x <= d[p][0.50]:\n",
    "        return 2\n",
    "    elif x <= d[p][0.75]: \n",
    "        return 3\n",
    "    else:\n",
    "        return 4\n",
    "    \n",
    "def FMScore(x,p,d):\n",
    "    if x <= d[p][0.25]:\n",
    "        return 4\n",
    "    elif x <= d[p][0.50]:\n",
    "        return 3\n",
    "    elif x <= d[p][0.75]: \n",
    "        return 2\n",
    "    else:\n",
    "        return 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Add segment numbers to the newly created segmented RFM table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>recency</th>\n",
       "      <th>frequency</th>\n",
       "      <th>monetary_value</th>\n",
       "      <th>r_quartile</th>\n",
       "      <th>f_quartile</th>\n",
       "      <th>m_quartile</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44118921</th>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>33.3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108938802</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>44.2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110361993</th>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>137.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138437670</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5.5</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144777339</th>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>60.8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           recency  frequency  monetary_value  r_quartile  f_quartile  \\\n",
       "user_id                                                                 \n",
       "44118921        26          1            33.3           4           4   \n",
       "108938802        4          3            44.2           2           2   \n",
       "110361993        7         11           137.0           2           1   \n",
       "138437670        3          1             5.5           2           4   \n",
       "144777339        0         14            60.8           1           1   \n",
       "\n",
       "           m_quartile  \n",
       "user_id                \n",
       "44118921            2  \n",
       "108938802           2  \n",
       "110361993           1  \n",
       "138437670           4  \n",
       "144777339           1  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "segmented_rfm['r_quartile'] = segmented_rfm['recency'].apply(RScore, args=('recency',quantiles,))\n",
    "segmented_rfm['f_quartile'] = segmented_rfm['frequency'].apply(FMScore, args=('frequency',quantiles,))\n",
    "segmented_rfm['m_quartile'] = segmented_rfm['monetary_value'].apply(FMScore, args=('monetary_value',quantiles,))\n",
    "segmented_rfm.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Add a new column to combine RFM score: 111 is the highest score as we determined earlier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>recency</th>\n",
       "      <th>frequency</th>\n",
       "      <th>monetary_value</th>\n",
       "      <th>r_quartile</th>\n",
       "      <th>f_quartile</th>\n",
       "      <th>m_quartile</th>\n",
       "      <th>RFMScore</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>158803145067</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>47.3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185633012418</th>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>47.3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>273034018110</th>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>47.3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>305841546423</th>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>47.3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>564728528469</th>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>47.3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>602450723448</th>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>47.3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>645128728251</th>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>47.3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>664868775564</th>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>47.3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>669220505499</th>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>47.3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141236698554</th>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>47.3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              recency  frequency  monetary_value  r_quartile  f_quartile  \\\n",
       "user_id                                                                    \n",
       "158803145067        0          6            47.3           1           1   \n",
       "185633012418        0         11            47.3           1           1   \n",
       "273034018110        1          6            47.3           1           1   \n",
       "305841546423        0          6            47.3           1           1   \n",
       "564728528469        2          7            47.3           1           1   \n",
       "602450723448        1          7            47.3           1           1   \n",
       "645128728251        1          9            47.3           1           1   \n",
       "664868775564        1          6            47.3           1           1   \n",
       "669220505499        2         10            47.3           1           1   \n",
       "141236698554        1          6            47.3           1           1   \n",
       "\n",
       "              m_quartile RFMScore  \n",
       "user_id                            \n",
       "158803145067           1      111  \n",
       "185633012418           1      111  \n",
       "273034018110           1      111  \n",
       "305841546423           1      111  \n",
       "564728528469           1      111  \n",
       "602450723448           1      111  \n",
       "645128728251           1      111  \n",
       "664868775564           1      111  \n",
       "669220505499           1      111  \n",
       "141236698554           1      111  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "segmented_rfm['RFMScore'] = segmented_rfm.r_quartile.map(str) + segmented_rfm.f_quartile.map(str) + segmented_rfm.m_quartile.map(str)\n",
    "\n",
    "segmented_rfm.sort_values(by=['RFMScore','monetary_value'], ascending=True).head(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15597"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Top_Customers = segmented_rfm[segmented_rfm['RFMScore']=='111']\n",
    "Top_Customers.RFMScore.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RFMScore</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  RFMScore\n",
       "0      442\n",
       "1      222\n",
       "2      211\n",
       "3      244\n",
       "4      111"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfmTable2 = rfmTable.reset_index()\n",
    "rfmTable2 = rfmTable2[['RFMScore']]\n",
    "rfmTable2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RFMScore</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>111</td>\n",
       "      <td>15597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>444</td>\n",
       "      <td>12467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>344</td>\n",
       "      <td>6806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>443</td>\n",
       "      <td>6587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>122</td>\n",
       "      <td>5376</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   RFMScore  count\n",
       "0       111  15597\n",
       "63      444  12467\n",
       "47      344   6806\n",
       "62      443   6587\n",
       "5       122   5376"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped_by_rfmscore = rfmTable2.groupby(['RFMScore']).size().reset_index(name = 'count').sort_values('count', ascending=False)\n",
    "grouped_by_rfmscore.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "linkText": "Export to plot.ly",
        "plotlyServerURL": "https://plot.ly",
        "showLink": false
       },
       "data": [
        {
         "type": "bar",
         "x": [
          "111",
          "444",
          "344",
          "443",
          "122",
          "211",
          "222",
          "322",
          "244",
          "343",
          "333",
          "112",
          "144",
          "433",
          "121",
          "233",
          "332",
          "123",
          "221",
          "223",
          "323",
          "133",
          "321",
          "432",
          "311",
          "422",
          "212",
          "243",
          "442",
          "232",
          "434",
          "334",
          "143",
          "132",
          "423",
          "234",
          "134",
          "312",
          "342",
          "421",
          "411",
          "242",
          "331",
          "113",
          "142",
          "324",
          "412",
          "224",
          "424",
          "124",
          "431",
          "131",
          "231",
          "213",
          "313",
          "441",
          "413",
          "341",
          "241",
          "141",
          "114",
          "414",
          "214",
          "314"
         ],
         "y": [
          15597,
          12467,
          6806,
          6587,
          5376,
          5163,
          4719,
          4214,
          3477,
          3383,
          3232,
          3016,
          2833,
          2680,
          2518,
          2197,
          2182,
          2136,
          2128,
          2062,
          1952,
          1863,
          1727,
          1715,
          1699,
          1647,
          1544,
          1460,
          1338,
          1307,
          1281,
          1261,
          1234,
          1217,
          1100,
          901,
          825,
          764,
          631,
          485,
          334,
          259,
          246,
          235,
          232,
          221,
          219,
          215,
          213,
          181,
          180,
          144,
          130,
          118,
          95,
          75,
          52,
          28,
          13,
          12,
          7,
          5,
          3,
          2
         ]
        }
       ],
       "layout": {
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Customer RFM Segments"
        },
        "xaxis": {
         "title": {
          "text": "RFM Segment"
         }
        },
        "yaxis": {
         "title": {
          "text": "Number of Customers"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"3887fbf6-e337-49c1-a2b2-26875335a3a6\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"3887fbf6-e337-49c1-a2b2-26875335a3a6\")) {                    Plotly.newPlot(                        \"3887fbf6-e337-49c1-a2b2-26875335a3a6\",                        [{\"x\":[\"111\",\"444\",\"344\",\"443\",\"122\",\"211\",\"222\",\"322\",\"244\",\"343\",\"333\",\"112\",\"144\",\"433\",\"121\",\"233\",\"332\",\"123\",\"221\",\"223\",\"323\",\"133\",\"321\",\"432\",\"311\",\"422\",\"212\",\"243\",\"442\",\"232\",\"434\",\"334\",\"143\",\"132\",\"423\",\"234\",\"134\",\"312\",\"342\",\"421\",\"411\",\"242\",\"331\",\"113\",\"142\",\"324\",\"412\",\"224\",\"424\",\"124\",\"431\",\"131\",\"231\",\"213\",\"313\",\"441\",\"413\",\"341\",\"241\",\"141\",\"114\",\"414\",\"214\",\"314\"],\"y\":[15597,12467,6806,6587,5376,5163,4719,4214,3477,3383,3232,3016,2833,2680,2518,2197,2182,2136,2128,2062,1952,1863,1727,1715,1699,1647,1544,1460,1338,1307,1281,1261,1234,1217,1100,901,825,764,631,485,334,259,246,235,232,221,219,215,213,181,180,144,130,118,95,75,52,28,13,12,7,5,3,2],\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Customer RFM Segments\"},\"xaxis\":{\"title\":{\"text\":\"RFM Segment\"}},\"yaxis\":{\"title\":{\"text\":\"Number of Customers\"}}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('3887fbf6-e337-49c1-a2b2-26875335a3a6');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_plot = [go.Bar(x=grouped_by_rfmscore['RFMScore'], y=grouped_by_rfmscore['count'])]\n",
    "\n",
    "layout = go.Layout(\n",
    "    title=go.layout.Title(\n",
    "        text='Customer RFM Segments'\n",
    "    ),\n",
    "    xaxis=go.layout.XAxis(\n",
    "        title=go.layout.xaxis.Title(\n",
    "            text='RFM Segment'\n",
    "        )\n",
    "    ),\n",
    "    yaxis=go.layout.YAxis(\n",
    "        title=go.layout.yaxis.Title(\n",
    "            text='Number of Customers'\n",
    "        )\n",
    "    )\n",
    ")\n",
    "\n",
    "fig = go.Figure(data=data_plot, layout=layout)\n",
    "iplot(fig, filename='rfm_Segments')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>recency</th>\n",
       "      <th>frequency</th>\n",
       "      <th>monetary_value</th>\n",
       "      <th>r_quartile</th>\n",
       "      <th>f_quartile</th>\n",
       "      <th>m_quartile</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>121943.000000</td>\n",
       "      <td>121943.000000</td>\n",
       "      <td>121943.000000</td>\n",
       "      <td>121943.000000</td>\n",
       "      <td>121943.000000</td>\n",
       "      <td>121943.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>9.762036</td>\n",
       "      <td>4.381309</td>\n",
       "      <td>37.339123</td>\n",
       "      <td>2.424567</td>\n",
       "      <td>2.608301</td>\n",
       "      <td>2.502718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9.154451</td>\n",
       "      <td>5.443188</td>\n",
       "      <td>41.786941</td>\n",
       "      <td>1.164638</td>\n",
       "      <td>1.175263</td>\n",
       "      <td>1.119542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>11.600000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>23.300000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>16.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>47.300000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>30.000000</td>\n",
       "      <td>135.000000</td>\n",
       "      <td>1351.500000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             recency      frequency  monetary_value     r_quartile  \\\n",
       "count  121943.000000  121943.000000   121943.000000  121943.000000   \n",
       "mean        9.762036       4.381309       37.339123       2.424567   \n",
       "std         9.154451       5.443188       41.786941       1.164638   \n",
       "min         0.000000       1.000000        0.400000       1.000000   \n",
       "25%         2.000000       1.000000       11.600000       1.000000   \n",
       "50%         7.000000       2.000000       23.300000       2.000000   \n",
       "75%        16.000000       5.000000       47.300000       3.000000   \n",
       "max        30.000000     135.000000     1351.500000       4.000000   \n",
       "\n",
       "          f_quartile     m_quartile  \n",
       "count  121943.000000  121943.000000  \n",
       "mean        2.608301       2.502718  \n",
       "std         1.175263       1.119542  \n",
       "min         1.000000       1.000000  \n",
       "25%         2.000000       2.000000  \n",
       "50%         3.000000       3.000000  \n",
       "75%         4.000000       4.000000  \n",
       "max         4.000000       4.000000  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "segmented_rfm.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>recency</th>\n",
       "      <th>frequency</th>\n",
       "      <th>monetary_value</th>\n",
       "      <th>r_quartile</th>\n",
       "      <th>f_quartile</th>\n",
       "      <th>m_quartile</th>\n",
       "      <th>RFMScore</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44118921</th>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>33.3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108938802</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>44.2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110361993</th>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>137.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138437670</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5.5</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144777339</th>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>60.8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           recency  frequency  monetary_value  r_quartile  f_quartile  \\\n",
       "user_id                                                                 \n",
       "44118921        26          1            33.3           4           4   \n",
       "108938802        4          3            44.2           2           2   \n",
       "110361993        7         11           137.0           2           1   \n",
       "138437670        3          1             5.5           2           4   \n",
       "144777339        0         14            60.8           1           1   \n",
       "\n",
       "           m_quartile RFMScore  \n",
       "user_id                         \n",
       "44118921            2      442  \n",
       "108938802           2      222  \n",
       "110361993           1      211  \n",
       "138437670           4      244  \n",
       "144777339           1      111  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "segmented_rfm.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "BestCustomers = ['111']\n",
    "BigSpenders = ['331','121','221','321','131','231','341','241','141']\n",
    "LoyalCustomers = ['212','112','211','312','313','113','213','114','214','314']\n",
    "Promising = ['222','223','123','122']\n",
    "Worrying = ['311']\n",
    "LostBestCustomers = ['411']\n",
    "LostCustomers = ['422','412','421','432','442','431','441']\n",
    "LostCheapCustomers = ['433','444','434','424','413','423','443','414']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def f(row):\n",
    "\n",
    "    if row['RFMScore'] in BestCustomers:\n",
    "        val = 'Best Customers'\n",
    "    elif row['RFMScore'] in BigSpenders:\n",
    "        val = 'Big Spenders'\n",
    "    elif row['RFMScore'] in LoyalCustomers:\n",
    "        val = 'Loyal Customers'\n",
    "    elif row['RFMScore'] in Promising:\n",
    "        val = 'Promising'\n",
    "    elif row['RFMScore'] in Worrying:\n",
    "        val = 'Worrying'        \n",
    "    elif row['RFMScore'] in LostBestCustomers:\n",
    "        val = 'Lost Best Customers'   \n",
    "    elif row['RFMScore'] in LostCustomers:\n",
    "        val = 'Lost Customers'\n",
    "    elif row['RFMScore'] in LostCheapCustomers:\n",
    "        val = 'Lost Cheap Customers'\n",
    "    else:\n",
    "        val = 'Need Attention'\n",
    "    return val"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "segmented_rfm['segment'] = segmented_rfm.apply(f, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>recency</th>\n",
       "      <th>frequency</th>\n",
       "      <th>monetary_value</th>\n",
       "      <th>r_quartile</th>\n",
       "      <th>f_quartile</th>\n",
       "      <th>m_quartile</th>\n",
       "      <th>RFMScore</th>\n",
       "      <th>segment</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44118921</th>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>33.3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>442</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108938802</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>44.2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>222</td>\n",
       "      <td>Promising</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110361993</th>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>137.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>211</td>\n",
       "      <td>Loyal Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138437670</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5.5</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>244</td>\n",
       "      <td>Need Attention</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144777339</th>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>60.8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "      <td>Best Customers</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           recency  frequency  monetary_value  r_quartile  f_quartile  \\\n",
       "user_id                                                                 \n",
       "44118921        26          1            33.3           4           4   \n",
       "108938802        4          3            44.2           2           2   \n",
       "110361993        7         11           137.0           2           1   \n",
       "138437670        3          1             5.5           2           4   \n",
       "144777339        0         14            60.8           1           1   \n",
       "\n",
       "           m_quartile RFMScore          segment  \n",
       "user_id                                          \n",
       "44118921            2      442   Lost Customers  \n",
       "108938802           2      222        Promising  \n",
       "110361993           1      211  Loyal Customers  \n",
       "138437670           4      244   Need Attention  \n",
       "144777339           1      111   Best Customers  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "segmented_rfm.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>segment</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Need Attention</td>\n",
       "      <td>42083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Lost Cheap Customers</td>\n",
       "      <td>24385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Best Customers</td>\n",
       "      <td>15597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Promising</td>\n",
       "      <td>14293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Loyal Customers</td>\n",
       "      <td>10947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Big Spenders</td>\n",
       "      <td>6946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Lost Customers</td>\n",
       "      <td>5659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Worrying</td>\n",
       "      <td>1699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Lost Best Customers</td>\n",
       "      <td>334</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                segment  count\n",
       "6        Need Attention  42083\n",
       "3  Lost Cheap Customers  24385\n",
       "0        Best Customers  15597\n",
       "7             Promising  14293\n",
       "5       Loyal Customers  10947\n",
       "1          Big Spenders   6946\n",
       "4        Lost Customers   5659\n",
       "8              Worrying   1699\n",
       "2   Lost Best Customers    334"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped_by_segment = segmented_rfm.groupby(['segment']).size().reset_index(name = 'count').sort_values('count', ascending=False)\n",
    "grouped_by_segment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = grouped_by_segment.plot.barh(x='segment',y='count', align='center')\n",
    "ax.invert_yaxis()\n",
    "ax.set_xlabel('Segment')\n",
    "ax.set_title('Customers per Segment')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Per City"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>recency</th>\n",
       "      <th>frequency</th>\n",
       "      <th>monetary_value</th>\n",
       "      <th>r_quartile</th>\n",
       "      <th>f_quartile</th>\n",
       "      <th>m_quartile</th>\n",
       "      <th>RFMScore</th>\n",
       "      <th>segment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>44118921</td>\n",
       "      <td>26</td>\n",
       "      <td>1</td>\n",
       "      <td>33.3</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>442</td>\n",
       "      <td>Lost Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>108938802</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>44.2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>222</td>\n",
       "      <td>Promising</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>110361993</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>137.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>211</td>\n",
       "      <td>Loyal Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>138437670</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5.5</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>244</td>\n",
       "      <td>Need Attention</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>144777339</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>60.8</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "      <td>Best Customers</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  recency  frequency  monetary_value  r_quartile  f_quartile  \\\n",
       "0   44118921       26          1            33.3           4           4   \n",
       "1  108938802        4          3            44.2           2           2   \n",
       "2  110361993        7         11           137.0           2           1   \n",
       "3  138437670        3          1             5.5           2           4   \n",
       "4  144777339        0         14            60.8           1           1   \n",
       "\n",
       "   m_quartile RFMScore          segment  \n",
       "0           2      442   Lost Customers  \n",
       "1           2      222        Promising  \n",
       "2           1      211  Loyal Customers  \n",
       "3           4      244   Need Attention  \n",
       "4           1      111   Best Customers  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "segmented_rfm.head().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_new = data.merge(segmented_rfm, how=\"left\",on = 'user_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_timestamp</th>\n",
       "      <th>city</th>\n",
       "      <th>cuisine</th>\n",
       "      <th>paid_cash</th>\n",
       "      <th>amount</th>\n",
       "      <th>day</th>\n",
       "      <th>recency</th>\n",
       "      <th>frequency</th>\n",
       "      <th>monetary_value</th>\n",
       "      <th>r_quartile</th>\n",
       "      <th>f_quartile</th>\n",
       "      <th>m_quartile</th>\n",
       "      <th>RFMScore</th>\n",
       "      <th>segment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7322173742136</td>\n",
       "      <td>94223136441</td>\n",
       "      <td>2022-01-18 15:41:28</td>\n",
       "      <td>Αίγιο</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>3.6</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>103.6</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>111</td>\n",
       "      <td>Best Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7210978616924</td>\n",
       "      <td>204794985423</td>\n",
       "      <td>2022-01-02 17:50:50</td>\n",
       "      <td>Αγρίνιο</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>30.5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>212</td>\n",
       "      <td>Loyal Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7221232906132</td>\n",
       "      <td>12703920390</td>\n",
       "      <td>2022-01-04 08:37:12</td>\n",
       "      <td>Αγρίνιο</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>1.7</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>35.7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>112</td>\n",
       "      <td>Loyal Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7399605199800</td>\n",
       "      <td>673310109528</td>\n",
       "      <td>2022-01-31 11:33:05</td>\n",
       "      <td>Λιβαδειά</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Monday</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>23.9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>112</td>\n",
       "      <td>Loyal Customers</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7264221279744</td>\n",
       "      <td>673310109528</td>\n",
       "      <td>2022-01-10 11:18:28</td>\n",
       "      <td>Λιβαδειά</td>\n",
       "      <td>Breakfast</td>\n",
       "      <td>True</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Monday</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>23.9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>112</td>\n",
       "      <td>Loyal Customers</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        order_id       user_id     order_timestamp      city    cuisine  \\\n",
       "0  7322173742136   94223136441 2022-01-18 15:41:28     Αίγιο  Breakfast   \n",
       "1  7210978616924  204794985423 2022-01-02 17:50:50   Αγρίνιο  Breakfast   \n",
       "2  7221232906132   12703920390 2022-01-04 08:37:12   Αγρίνιο  Breakfast   \n",
       "3  7399605199800  673310109528 2022-01-31 11:33:05  Λιβαδειά  Breakfast   \n",
       "4  7264221279744  673310109528 2022-01-10 11:18:28  Λιβαδειά  Breakfast   \n",
       "\n",
       "   paid_cash  amount      day  recency  frequency  monetary_value  r_quartile  \\\n",
       "0       True     3.6  Tuesday        2         11           103.6           1   \n",
       "1       True     1.9   Sunday        4          7            30.5           2   \n",
       "2       True     1.7  Tuesday        0         21            35.7           1   \n",
       "3       True     3.0   Monday        0          8            23.9           1   \n",
       "4       True     3.0   Monday        0          8            23.9           1   \n",
       "\n",
       "   f_quartile  m_quartile RFMScore          segment  \n",
       "0           1           1      111   Best Customers  \n",
       "1           1           2      212  Loyal Customers  \n",
       "2           1           2      112  Loyal Customers  \n",
       "3           1           2      112  Loyal Customers  \n",
       "4           1           2      112  Loyal Customers  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>RFMScore</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>city</th>\n",
       "      <th>segment</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Άνδρος</th>\n",
       "      <th>Need Attention</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Άργος</th>\n",
       "      <th>Best Customers</th>\n",
       "      <td>897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Big Spenders</th>\n",
       "      <td>214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lost Best Customers</th>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lost Cheap Customers</th>\n",
       "      <td>223</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             RFMScore\n",
       "city   segment                       \n",
       "Άνδρος Need Attention               8\n",
       "Άργος  Best Customers             897\n",
       "       Big Spenders               214\n",
       "       Lost Best Customers         44\n",
       "       Lost Cheap Customers       223"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped_by_city = data_new.groupby(['city','segment']).agg({'RFMScore': lambda x: x.count()})\n",
    "grouped_by_city.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Breakfast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_new3 = data_new.drop(['order_id'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_new2 = data_new3.drop_duplicates('user_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cuisine</th>\n",
       "      <th>segment</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Meat</td>\n",
       "      <td>Need Attention</td>\n",
       "      <td>21681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Meat</td>\n",
       "      <td>Best Customers</td>\n",
       "      <td>13778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Breakfast</td>\n",
       "      <td>Need Attention</td>\n",
       "      <td>13241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Italian</td>\n",
       "      <td>Need Attention</td>\n",
       "      <td>13197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Breakfast</td>\n",
       "      <td>Best Customers</td>\n",
       "      <td>12650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Italian</td>\n",
       "      <td>Best Customers</td>\n",
       "      <td>11029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Meat</td>\n",
       "      <td>Promising</td>\n",
       "      <td>10572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Meat</td>\n",
       "      <td>Lost Cheap Customers</td>\n",
       "      <td>9796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Breakfast</td>\n",
       "      <td>Loyal Customers</td>\n",
       "      <td>8757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Meat</td>\n",
       "      <td>Loyal Customers</td>\n",
       "      <td>8450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Breakfast</td>\n",
       "      <td>Lost Cheap Customers</td>\n",
       "      <td>7925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Breakfast</td>\n",
       "      <td>Promising</td>\n",
       "      <td>7507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Street food</td>\n",
       "      <td>Best Customers</td>\n",
       "      <td>7108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Street food</td>\n",
       "      <td>Need Attention</td>\n",
       "      <td>6970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Italian</td>\n",
       "      <td>Lost Cheap Customers</td>\n",
       "      <td>6271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Italian</td>\n",
       "      <td>Promising</td>\n",
       "      <td>6209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Italian</td>\n",
       "      <td>Loyal Customers</td>\n",
       "      <td>5781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Meat</td>\n",
       "      <td>Big Spenders</td>\n",
       "      <td>5075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Italian</td>\n",
       "      <td>Big Spenders</td>\n",
       "      <td>4529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Street food</td>\n",
       "      <td>Loyal Customers</td>\n",
       "      <td>3666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Street food</td>\n",
       "      <td>Promising</td>\n",
       "      <td>3535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Street food</td>\n",
       "      <td>Lost Cheap Customers</td>\n",
       "      <td>3136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Italian</td>\n",
       "      <td>Lost Customers</td>\n",
       "      <td>3021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Meat</td>\n",
       "      <td>Lost Customers</td>\n",
       "      <td>2915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Street food</td>\n",
       "      <td>Big Spenders</td>\n",
       "      <td>2710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Breakfast</td>\n",
       "      <td>Big Spenders</td>\n",
       "      <td>2217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Breakfast</td>\n",
       "      <td>Lost Customers</td>\n",
       "      <td>1901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Street food</td>\n",
       "      <td>Lost Customers</td>\n",
       "      <td>1598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Meat</td>\n",
       "      <td>Worrying</td>\n",
       "      <td>1425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Breakfast</td>\n",
       "      <td>Worrying</td>\n",
       "      <td>1339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Italian</td>\n",
       "      <td>Worrying</td>\n",
       "      <td>1146</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Street food</td>\n",
       "      <td>Worrying</td>\n",
       "      <td>734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Breakfast</td>\n",
       "      <td>Lost Best Customers</td>\n",
       "      <td>297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Meat</td>\n",
       "      <td>Lost Best Customers</td>\n",
       "      <td>258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Italian</td>\n",
       "      <td>Lost Best Customers</td>\n",
       "      <td>222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Street food</td>\n",
       "      <td>Lost Best Customers</td>\n",
       "      <td>143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        cuisine               segment  user_id\n",
       "0          Meat        Need Attention    21681\n",
       "1          Meat        Best Customers    13778\n",
       "2     Breakfast        Need Attention    13241\n",
       "3       Italian        Need Attention    13197\n",
       "4     Breakfast        Best Customers    12650\n",
       "5       Italian        Best Customers    11029\n",
       "6          Meat             Promising    10572\n",
       "7          Meat  Lost Cheap Customers     9796\n",
       "8     Breakfast       Loyal Customers     8757\n",
       "9          Meat       Loyal Customers     8450\n",
       "10    Breakfast  Lost Cheap Customers     7925\n",
       "11    Breakfast             Promising     7507\n",
       "12  Street food        Best Customers     7108\n",
       "13  Street food        Need Attention     6970\n",
       "14      Italian  Lost Cheap Customers     6271\n",
       "15      Italian             Promising     6209\n",
       "16      Italian       Loyal Customers     5781\n",
       "17         Meat          Big Spenders     5075\n",
       "18      Italian          Big Spenders     4529\n",
       "19  Street food       Loyal Customers     3666\n",
       "20  Street food             Promising     3535\n",
       "21  Street food  Lost Cheap Customers     3136\n",
       "22      Italian        Lost Customers     3021\n",
       "23         Meat        Lost Customers     2915\n",
       "24  Street food          Big Spenders     2710\n",
       "25    Breakfast          Big Spenders     2217\n",
       "26    Breakfast        Lost Customers     1901\n",
       "27  Street food        Lost Customers     1598\n",
       "28         Meat              Worrying     1425\n",
       "29    Breakfast              Worrying     1339\n",
       "30      Italian              Worrying     1146\n",
       "31  Street food              Worrying      734\n",
       "32    Breakfast   Lost Best Customers      297\n",
       "33         Meat   Lost Best Customers      258\n",
       "34      Italian   Lost Best Customers      222\n",
       "35  Street food   Lost Best Customers      143"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grouped_by_cuisine = data_new.groupby(['cuisine','segment']).agg({'user_id': lambda x: x.nunique()}).sort_values('user_id', ascending=False)\n",
    "grouped_by_cuisine = grouped_by_cuisine.reset_index()\n",
    "grouped_by_cuisine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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m/DwcHr37k1ubm6ZH2PChAl89NFHp9w+e/ZsFizw71Vccm70sl8REZEyFJ8cX6btffbAZ2esU3zu1H79+jF79mwefPBB3/b8/HyqVDm3X/lFL/Y9lWHDhp1T++I/9cSJiIhUIgkJCezatYuUlBQSEhLo1q0boaGh5OXlcddddxEREUFUVJRvRoZ58+bRvXt3brzxRho3bsysWbOYNm0aUVFRtGnThp9++gmApKQkFi9eDMDYsWMJDQ3F5XLx0EMPATBx4kSmTp0KQIcOHXj44YeJi4vj6quvZtWqVQDk5ubSp08fQkND6dGjB61bt+ZsXr4vHuqJExERqSTy8/N577336Ny5M+CZ5D49PZ0mTZrw9NNPY4xh69atbN++nU6dOrFjxw4A0tPT2bRpE3l5efz+97/nySefZNOmTYwaNYoFCxYwcuRI3zF+/PFH3nzzTbZv344xhqysrFPGsm7dOt59910ee+wxPvroI5599lnq1q3Ltm3bSE9P900VJmdHPXEiIiIOVzR3akxMDFdeeSV33303AHFxcTRp0gSA1atX079/fwBatGjBVVdd5UviOnbsSHBwMA0aNCAkJISuXbsCEBERQWZm5nHHCgkJoXr16tx999288cYb1KxZs8SYbrvtNgCio6N9baxevZrbb78dgPDwcFwuV9n9EC5C6okTERFxuOLPxBVXq1atUu1frVo133JAQIBvPSAggPz8/OPqVqlShXXr1vHxxx+zePFiZs2axYoVK07ZZmBg4EltSNlQT5yIiMhFICEhgZdffhmAHTt2sGfPHpo3b+53Ozk5OWRnZ3PzzTczffp0Nm/eXOp94+Pjee211wDYtm0bW7du9fv48j/qiRMREbkI3Hvvvdxzzz1ERERQpUoV5s2bd1wPXGkdPnyYW2+9lby8PKy1TJs2za8YBg4cSGhoKC1atCAsLIyQkBC/YxAPY62t6BjOu5iYGHs2o2Gix/j3/pvUKQP8PoaIiDhLRkYGLVu2rOgwHKGgoIBjx45RvXp1du/ezQ033MBXX33FJZdcUtGhXTBKup6MManW2pgT66onTkRERM6L3NxcOnbsyLFjx7DW8uyzzyqBOwdK4kREROS8CA4O1nvhypAGNoiIiIg4kJI4EREREQdSEiciIiLiQEriRERERBxISZyIiIjDBQUFndP+KSkprFmz5pTb33vvPWJiYggNDSUqKorRo0cDkJSUxOLFi8/p2P5asGAB4eHhREREEBUVxdSpU/1uIysri2effbYcoju/NDpVRESkDH3arn2Zttd+5adl2l5JUlJSCAoK4pprrjlpW3p6Ovfffz/Lli2jRYsWFBQU8Pzzz5d7TCV57733mDFjBsuXL6dhw4b88ssvLFjg3ztc4X9J3L333lsOUZYsPz+fKlXKNu1ST5yIiEgllJaWRps2bXC5XPTo0YOff/4ZgJkzZxIaGorL5eL2228nMzOT2bNnM336dNxuN6tWrTqunaeeeorx48fTokULwDMX6j333OPbvnLlSq655hqaNm16XK/clClTiI2NxeVy8eijj/rKu3fvTnR0NGFhYcclg0FBQYwaNYqwsDCuv/56Dhw4cNI5/f3vf2fq1Kk0bNgQ8MzPOmTIEAA6dOjge33JwYMHady4MQBffvklcXFxuN1uXC4XO3fuZOzYsezevRu3282YMWOw1jJmzBhfD9+iRYsAT3Lbvn17br31Vpo2bcrYsWN5+eWXiYuLIyIigt27dwNw4MABevbsSWxsLLGxsXz22WcATJw4kT/84Q/Ex8fzhz/8ocRYzoV64kRERCqhAQMGkJycTPv27ZkwYQKPPfYYM2bMYPLkyXzzzTdUq1aNrKws6tSpw7BhwwgKCuKhhx46qZ309HTf7dOS7N+/n9WrV7N9+3a6detGr169WL58OTt37mTdunVYa+nWrRsrV66kXbt2zJkzh3r16nH06FFiY2Pp2bMn9evX58iRI8TExDB9+nQmTZrEY489xqxZs06KJTo62q+fw+zZsxkxYgT9+vXj119/paCggMmTJ5Oenk5aWhoAS5YsIS0tjc2bN3Pw4EFiY2Np164dAJs3byYjI4N69erRtGlTBg8ezLp163jmmWdITk5mxowZjBgxglGjRnHttdeyZ88eEhMTycjIADxzxK5evZoaNWrwwAMPnBTLuVASJyIiUslkZ2eTlZVF+/aeW7sDBw6kd+/eALhcLvr160f37t3p3r37OR+re/fuBAQEEBoayvfffw/A8uXLWb58OVFRUQDk5OSwc+dO2rVrx8yZM3nzzTcB+Pbbb9m5cyf169cnICCAvn37AtC/f39uu+22c44NoG3btjz++OPs3buX2267jWbNmp1UZ/Xq1dxxxx0EBgZy2WWX0b59e9avX0/t2rWJjY3l8ssvB+B3v/sdnTp1AiAiIoJPPvkEgI8++oht27b52jt06BA5OTkAdOvWjRo1apQ6Fn/odqqIiMhFZNmyZdx3331s3LiR2NhY8vPzT1s/LCyM1NTUU26vVq2ab7loPnZrLePGjSMtLY20tDR27drF3XffTUpKCh999BFr165l8+bNREVFkZeXV2K7xhi/YqlSpQqFhYUAx7V555138s4771CjRg1uvvlmVqxYcdrzPd35BQQE+NYDAgJ8P7vCwkI+//xz3/nu27fPN9ikVq1aZRbLiZTEiYiIVDIhISHUrVvX93zbiy++SPv27SksLOTbb7+lY8eOPPnkk2RnZ5OTk0NwcDCHDx8usa0xY8bwxBNPsGPHDsCTsMyePfu0x09MTGTOnDm+3qh9+/bxww8/kJ2dTd26dalZsybbt2/n888/9+1TWFjoe6bulVde4dprrz2p3XHjxjFmzBj++9//AvDrr7/ywgsvANC4cWNfglf82byvv/6apk2bMnz4cG699Va2bNly0vkmJCSwaNEiCgoKOHDgACtXriQuLu6051hcp06dSE5O9q0X3aY9UUmxnAvdThUREXG43NxcGjVq5Ft/8MEHmT9/PsOGDSM3N5emTZsyd+5cCgoK6N+/P9nZ2VhrGT58OHXq1KFr16706tWLt99+m+TkZBISEnxtuVwuZsyYwR133EFubi7GGLp06XLaeDp16kRGRgZt27YFPIMWXnrpJTp37szs2bNp2bIlzZs3p02bNr59atWqxbp16/jb3/7G//3f//kGFxR388038/3333PDDTdgrcUYw6BBgwB46KGH6NOnD88//zy33HKLb5/XXnuNF198kapVq/Kb3/yGP//5z9SrV4/4+HjCw8O56aabeOqpp1i7di2RkZEYY3jqqaf4zW9+w/bt20v18585cyb33XcfLpeL/Px82rVrV2KiW1Is58IUdX1eTGJiYuzZTMAbPca/YcypUwb4fQwREXGWjIwMWrZsWdFhOF5QUJCv5+5iVtL1ZIxJtdbGnFhXt1NFREREHEhJnIiIiFQ49cL5T0mciIiIiAMpiRMRERFxICVxIiIiIg6kJE5ERETEgZTEiYiIOFzR7ADlISkp6biX5xY3depUWrRogdvtJjY2lgUL/HsVF0BmZiavvPLKuYZ5UdLLfkVERMrQrNH/r0zbu//prmXaXlmZPXs2H374IevWraN27docOnTINyeqP4qSuDvvvLMcoixZfn4+Vao4PwVST5yIiEgllJaWRps2bXC5XPTo0YOff/6Z3bt306pVK1+dnTt3+tYnTZpEbGws4eHhDB06lDNNBvDEE0/w3HPPUbt2bQBq167NwIEDAc8UWAcPHgRgw4YNdOjQAYBPP/0Ut9uN2+0mKiqKw4cPM3bsWFatWoXb7Wb69Onk5eVx1113ERERQVRUlG+S+Xnz5tG9e3duvPFGGjduzKxZs5g2bRpRUVG0adOGn376CYDdu3fTuXNnoqOjSUhI8M26kJSUxLBhw2jdujV/+tOfSozFaZTEiYiIVEIDBgzgySefZMuWLURERPDYY4/xu9/9jpCQEN/cnnPnzuWuu+4C4P7772f9+vWkp6dz9OhRli5desq2Dx06xOHDh2natKlfMU2dOpV//OMfpKWlsWrVKmrUqMHkyZNJSEggLS2NUaNG8Y9//ANjDFu3bmXhwoUMHDjQN6F9eno6b7zxBuvXr2f8+PHUrFmTTZs20bZtW9+t3KFDh5KcnExqaipTp07l3nvv9R1/7969rFmzhmnTppUYi9MoiRMREalksrOzycrKon379gAMHDiQlStXAjB48GDfPKqLFi3y3cb85JNPaN26NREREaxYsYIvv/yyzOOKj4/nwQcfZObMmWRlZZV4S3P16tX0798fgBYtWnDVVVexY8cOADp27EhwcDANGjQgJCSErl09t5ojIiLIzMwkJyeHNWvW0Lt3b9xuN3/84x/Zv3+/r+3evXsTGBhY6lgudEriRERELiI9e/bkvffeY+nSpURHR1O/fn3y8vK49957Wbx4MVu3bmXIkCG+3q+S1K5dm6CgIL7++usSt1epUoXCwkKA49oZO3YsL7zwAkePHiU+Pr7UE8wXqVatmm85ICDAtx4QEEB+fj6FhYXUqVOHtLQ031dGRoZvn1q1apVZLBcCJXEiIiKVTEhICHXr1mXVqlUAvPjii75euerVq5OYmMg999zju5ValGhdeuml5OTknHI0anHjxo3jvvvu49ChQ4Bn2qyiW5qNGzcmNTUVgCVLlvj22b17NxERETz88MPExsayfft2goODj3seLSEhgZdffhmAHTt2sGfPHpo3b16q865duzZNmjTh9ddfB8Bay+bNm0usW1IsTqMkTkRExOFyc3Np1KiR72vatGnMnz+fMWPG4HK5SEtLY8KECb76/fr1IyAggE6dOgFQp04dhgwZQnh4OImJicTGxp7xmPfccw8dO3b0DYZISEggIMCTVjz66KOMGDGCmJgY3+1LgBkzZhAeHo7L5aJq1arcdNNNuFwuAgMDiYyMZPr06dx7770UFhYSERFB3759mTdv3nE9cGfy8ssv8+9//5vIyEjCwsJ4++23S6xXUixOY840+qQyiomJsRs2bPB7v+gx/r3/JnXKAL+PISIizpKRkUHLli0rOgy/TJ06lezsbP76179WdChygpKuJ2NMqrU25sS6znuKT0RERM5ajx492L17NytWrKjoUOQcKYkTERG5iJzNC3nlwqRn4kREREQcSEmciIiIiAMpiRMRERFxICVxIiIiIg6kJE5ERMThAgMDcbvdREZG0qpVK9asWQPAd999R69evfxqa+nSpURFRREZGUloaCj//Oc/yyNkn5SUFLp06VKux6isNDpVRESkDD3e37+k6UzGv3Tm2RNq1Kjhm9T+gw8+YNy4cXz66ac0bNiwVLMvFDl27BhDhw5l3bp1NGrUiF9++YXMzMyzjLx85OfnO3Ke0/KgnjgREZFK5NChQ9StWxeAzMxMwsPDAc+sDn369CE0NJQePXrQunVrTnzx/eHDh8nPz6d+/fqAZ67SoimvkpKSGDZsGDExMVx99dUsXboUgIKCAsaMGUNsbCwul8vXc5eSkkKHDh3o1asXLVq0oF+/fhRNMPD+++/TokULWrVqxRtvvOE7/pEjRxg0aBBxcXFERUX5ZluYN28e3bp147rrruP6669n//79tGvXDrfbTXh4uG96sYuNUlkRERGHO3r0KG63m7y8PPbv31/ii3yfffZZ6taty7Zt20hPT8ftdp9Up169enTr1o2rrrqK66+/ni5dunDHHXf4ptPKzMxk3bp17N69m44dO7Jr1y4WLFhASEgI69ev55dffiE+Pt43ndemTZv48ssvadiwIfHx8Xz22WfExMQwZMgQVqxYwe9//3v69u3rO/7jjz/Oddddx5w5c8jKyiIuLo4bbrgBgI0bN7Jlyxbq1avH008/TWJiIuPHj6egoIDc3Nxy+Kle+JTEiYiIOFzx26lr165lwIABpKenH1dn9erVjBgxAsA3Z2hJXnjhBbZu3cpHH33E1KlT+fDDD5k3bx4Affr0ISAg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008/xe1243a7iYqK4vDhw4wdO5ZVq1bhdruZPn36ce2+8sortG3b1pfAAXTo0IHw8HDmzZvH/fff7yvv0qULKSkpFBQUkJSURHh4OBEREUyfPp3FixezYcMG+vXrh9vt5ujRo3z88cdERUURERHBoEGD+OWXXwBo3Lgx48aNw+12ExMTw8aNG0lMTOR3v/sds2fP9h1vypQpxMbG4nK5ePTRRwFPQtq8eXMGDBhAeHg433777UmxnA9n7IkzxrQ63XZr7cayC0dERETKwoABA0hOTqZ9+/ZMmDCBxx57jBkzZjB58mS++eYbqlWrRlZWFnXq1GHYsGEEBQXx0EMPldjWokWLWL16Nfv37+fqq6/2JVsjRoxg1KhRXHvttezZs4fExEQyMjKYOnUq//jHP4iPjycnJ4fq1aszefJkpk6dytKlS09qPz09nejoaL/OLy0tjX379pGeng7gO5dZs2YxdepUYmJiyMvLIykpiY8//pirr76aAQMG8NxzzzFy5EgArrzyStLS0hg1ahRJSUl89tln5OXlER4ezrBhw1i+fDk7d+5k3bp1WGvp1q0bK1eu5Morr2Tnzp3Mnz+fNm3akJqaelIs50NpeuKe9n79A/gCeB74l3f5H+UXmoiIiJyN7OxssrKyfBPdDxw4kJUrVwLgcrno168fL730ElWqlO6pqr59+5KWlsZ///tfIiIimDJlCgAfffQR999/P263m27dunHo0CFycnKIj4/nwQcfZObMmWRlZZX6OP5o2rQpX3/9NQ888ADvv/8+tWvXPqnOV199RZMmTbj66quB438OAN26dQM888y2bt2a4OBgGjRo4Etwly9fzvLly4mKiqJVq1Zs376dnTt3AnDVVVfRpk2bUsdSHs6YxFlrO1prOwL7gVbW2hhrbTQQBewr7wBFRESk7Cxbtoz77ruPjRs3EhsbS35+fqn3NcbQtWtXXyJUWFjI559/Tlpamq9nLCgoiLFjx/LCCy9w9OhR4uPj2b59+2nbDQsLIzU1tcRtVapUobCw0Leel5cHQN26ddm8eTMdOnRg9uzZDB48uNTnUaRatWoABAQE+JaL1vPz87HWMm7cON/57dq1i7vvvhuAWrVq+eqXRSxnw59n4ppba31PUltr04GWZR+SiIiInIuQkBDq1q3re77txRdfpH379hQWFvLtt9/SsWNHnnzy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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x=\"cuisine\", hue=\"segment\", y=\"user_id\", data=grouped_by_cuisine)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create Frequency pivot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>segment</th>\n",
       "      <th>Best Customers</th>\n",
       "      <th>Big Spenders</th>\n",
       "      <th>Lost Best Customers</th>\n",
       "      <th>Lost Cheap Customers</th>\n",
       "      <th>Lost Customers</th>\n",
       "      <th>Loyal Customers</th>\n",
       "      <th>Need Attention</th>\n",
       "      <th>Promising</th>\n",
       "      <th>Worrying</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cuisine</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Breakfast</th>\n",
       "      <td>12650</td>\n",
       "      <td>2217</td>\n",
       "      <td>297</td>\n",
       "      <td>7925</td>\n",
       "      <td>1901</td>\n",
       "      <td>8757</td>\n",
       "      <td>13241</td>\n",
       "      <td>7507</td>\n",
       "      <td>1339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Italian</th>\n",
       "      <td>11029</td>\n",
       "      <td>4529</td>\n",
       "      <td>222</td>\n",
       "      <td>6271</td>\n",
       "      <td>3021</td>\n",
       "      <td>5781</td>\n",
       "      <td>13197</td>\n",
       "      <td>6209</td>\n",
       "      <td>1146</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Meat</th>\n",
       "      <td>13778</td>\n",
       "      <td>5075</td>\n",
       "      <td>258</td>\n",
       "      <td>9796</td>\n",
       "      <td>2915</td>\n",
       "      <td>8450</td>\n",
       "      <td>21681</td>\n",
       "      <td>10572</td>\n",
       "      <td>1425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Street food</th>\n",
       "      <td>7108</td>\n",
       "      <td>2710</td>\n",
       "      <td>143</td>\n",
       "      <td>3136</td>\n",
       "      <td>1598</td>\n",
       "      <td>3666</td>\n",
       "      <td>6970</td>\n",
       "      <td>3535</td>\n",
       "      <td>734</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "segment      Best Customers  Big Spenders  Lost Best Customers  \\\n",
       "cuisine                                                          \n",
       "Breakfast             12650          2217                  297   \n",
       "Italian               11029          4529                  222   \n",
       "Meat                  13778          5075                  258   \n",
       "Street food            7108          2710                  143   \n",
       "\n",
       "segment      Lost Cheap Customers  Lost Customers  Loyal Customers  \\\n",
       "cuisine                                                              \n",
       "Breakfast                    7925            1901             8757   \n",
       "Italian                      6271            3021             5781   \n",
       "Meat                         9796            2915             8450   \n",
       "Street food                  3136            1598             3666   \n",
       "\n",
       "segment      Need Attention  Promising  Worrying  \n",
       "cuisine                                           \n",
       "Breakfast             13241       7507      1339  \n",
       "Italian               13197       6209      1146  \n",
       "Meat                  21681      10572      1425  \n",
       "Street food            6970       3535       734  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_new.pivot_table(values='user_id', index='cuisine', columns='segment', aggfunc=lambda x: len(x.unique()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Association Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "basket = (data_new.groupby(['user_id', 'cuisine'])['order_id']\n",
    "          .nunique().unstack().reset_index().fillna(0)\n",
    "          .set_index('user_id'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>cuisine</th>\n",
       "      <th>Breakfast</th>\n",
       "      <th>Italian</th>\n",
       "      <th>Meat</th>\n",
       "      <th>Street food</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44118921</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108938802</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110361993</th>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138437670</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144777339</th>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "cuisine    Breakfast  Italian  Meat  Street food\n",
       "user_id                                         \n",
       "44118921         0.0      0.0   1.0          0.0\n",
       "108938802        0.0      0.0   3.0          0.0\n",
       "110361993        1.0      4.0   3.0          3.0\n",
       "138437670        0.0      0.0   1.0          0.0\n",
       "144777339       14.0      0.0   0.0          0.0"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "basket.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Structure the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>cuisine</th>\n",
       "      <th>Breakfast</th>\n",
       "      <th>Italian</th>\n",
       "      <th>Meat</th>\n",
       "      <th>Street food</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44118921</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108938802</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110361993</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138437670</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>144777339</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "cuisine    Breakfast  Italian  Meat  Street food\n",
       "user_id                                         \n",
       "44118921           0        0     1            0\n",
       "108938802          0        0     1            0\n",
       "110361993          1        1     1            1\n",
       "138437670          0        0     1            0\n",
       "144777339          1        0     0            0"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def encode_units(x):\n",
    "    if x <= 0:\n",
    "        return 0\n",
    "    if x >= 1:\n",
    "        return 1\n",
    "\n",
    "basket_sets = basket.applymap(encode_units)\n",
    "basket_sets.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "frequent_itemsets = apriori(basket_sets, min_support=0.07, use_colnames=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>antecedents</th>\n",
       "      <th>consequents</th>\n",
       "      <th>antecedent support</th>\n",
       "      <th>consequent support</th>\n",
       "      <th>support</th>\n",
       "      <th>confidence</th>\n",
       "      <th>lift</th>\n",
       "      <th>leverage</th>\n",
       "      <th>conviction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(Italian)</td>\n",
       "      <td>(Street food)</td>\n",
       "      <td>0.421549</td>\n",
       "      <td>0.242736</td>\n",
       "      <td>0.106115</td>\n",
       "      <td>0.251726</td>\n",
       "      <td>1.037037</td>\n",
       "      <td>0.003790</td>\n",
       "      <td>1.012014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(Street food)</td>\n",
       "      <td>(Italian)</td>\n",
       "      <td>0.242736</td>\n",
       "      <td>0.421549</td>\n",
       "      <td>0.106115</td>\n",
       "      <td>0.437162</td>\n",
       "      <td>1.037037</td>\n",
       "      <td>0.003790</td>\n",
       "      <td>1.027739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(Italian, Breakfast)</td>\n",
       "      <td>(Meat)</td>\n",
       "      <td>0.179075</td>\n",
       "      <td>0.606431</td>\n",
       "      <td>0.125550</td>\n",
       "      <td>0.701104</td>\n",
       "      <td>1.156115</td>\n",
       "      <td>0.016954</td>\n",
       "      <td>1.316741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(Italian, Meat)</td>\n",
       "      <td>(Breakfast)</td>\n",
       "      <td>0.235561</td>\n",
       "      <td>0.457870</td>\n",
       "      <td>0.125550</td>\n",
       "      <td>0.532985</td>\n",
       "      <td>1.164054</td>\n",
       "      <td>0.017694</td>\n",
       "      <td>1.160842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>(Breakfast, Meat)</td>\n",
       "      <td>(Italian)</td>\n",
       "      <td>0.253586</td>\n",
       "      <td>0.421549</td>\n",
       "      <td>0.125550</td>\n",
       "      <td>0.495101</td>\n",
       "      <td>1.174479</td>\n",
       "      <td>0.018652</td>\n",
       "      <td>1.145675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>(Italian)</td>\n",
       "      <td>(Breakfast, Meat)</td>\n",
       "      <td>0.421549</td>\n",
       "      <td>0.253586</td>\n",
       "      <td>0.125550</td>\n",
       "      <td>0.297831</td>\n",
       "      <td>1.174479</td>\n",
       "      <td>0.018652</td>\n",
       "      <td>1.063012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>(Breakfast)</td>\n",
       "      <td>(Italian, Meat)</td>\n",
       "      <td>0.457870</td>\n",
       "      <td>0.235561</td>\n",
       "      <td>0.125550</td>\n",
       "      <td>0.274206</td>\n",
       "      <td>1.164054</td>\n",
       "      <td>0.017694</td>\n",
       "      <td>1.053245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>(Meat)</td>\n",
       "      <td>(Italian, Breakfast)</td>\n",
       "      <td>0.606431</td>\n",
       "      <td>0.179075</td>\n",
       "      <td>0.125550</td>\n",
       "      <td>0.207032</td>\n",
       "      <td>1.156115</td>\n",
       "      <td>0.016954</td>\n",
       "      <td>1.035255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>(Breakfast, Street food)</td>\n",
       "      <td>(Meat)</td>\n",
       "      <td>0.110552</td>\n",
       "      <td>0.606431</td>\n",
       "      <td>0.075880</td>\n",
       "      <td>0.686373</td>\n",
       "      <td>1.131825</td>\n",
       "      <td>0.008838</td>\n",
       "      <td>1.254897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>(Breakfast, Meat)</td>\n",
       "      <td>(Street food)</td>\n",
       "      <td>0.253586</td>\n",
       "      <td>0.242736</td>\n",
       "      <td>0.075880</td>\n",
       "      <td>0.299227</td>\n",
       "      <td>1.232725</td>\n",
       "      <td>0.014325</td>\n",
       "      <td>1.080612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>(Street food, Meat)</td>\n",
       "      <td>(Breakfast)</td>\n",
       "      <td>0.132103</td>\n",
       "      <td>0.457870</td>\n",
       "      <td>0.075880</td>\n",
       "      <td>0.574399</td>\n",
       "      <td>1.254504</td>\n",
       "      <td>0.015394</td>\n",
       "      <td>1.273801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>(Breakfast)</td>\n",
       "      <td>(Street food, Meat)</td>\n",
       "      <td>0.457870</td>\n",
       "      <td>0.132103</td>\n",
       "      <td>0.075880</td>\n",
       "      <td>0.165723</td>\n",
       "      <td>1.254504</td>\n",
       "      <td>0.015394</td>\n",
       "      <td>1.040299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>(Street food)</td>\n",
       "      <td>(Breakfast, Meat)</td>\n",
       "      <td>0.242736</td>\n",
       "      <td>0.253586</td>\n",
       "      <td>0.075880</td>\n",
       "      <td>0.312601</td>\n",
       "      <td>1.232725</td>\n",
       "      <td>0.014325</td>\n",
       "      <td>1.085854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>(Meat)</td>\n",
       "      <td>(Breakfast, Street food)</td>\n",
       "      <td>0.606431</td>\n",
       "      <td>0.110552</td>\n",
       "      <td>0.075880</td>\n",
       "      <td>0.125125</td>\n",
       "      <td>1.131825</td>\n",
       "      <td>0.008838</td>\n",
       "      <td>1.016658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>(Italian, Street food)</td>\n",
       "      <td>(Meat)</td>\n",
       "      <td>0.106115</td>\n",
       "      <td>0.606431</td>\n",
       "      <td>0.072107</td>\n",
       "      <td>0.679521</td>\n",
       "      <td>1.120525</td>\n",
       "      <td>0.007756</td>\n",
       "      <td>1.228065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>(Italian, Meat)</td>\n",
       "      <td>(Street food)</td>\n",
       "      <td>0.235561</td>\n",
       "      <td>0.242736</td>\n",
       "      <td>0.072107</td>\n",
       "      <td>0.306110</td>\n",
       "      <td>1.261079</td>\n",
       "      <td>0.014928</td>\n",
       "      <td>1.091330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>(Street food, Meat)</td>\n",
       "      <td>(Italian)</td>\n",
       "      <td>0.132103</td>\n",
       "      <td>0.421549</td>\n",
       "      <td>0.072107</td>\n",
       "      <td>0.545844</td>\n",
       "      <td>1.294852</td>\n",
       "      <td>0.016420</td>\n",
       "      <td>1.273682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>(Italian)</td>\n",
       "      <td>(Street food, Meat)</td>\n",
       "      <td>0.421549</td>\n",
       "      <td>0.132103</td>\n",
       "      <td>0.072107</td>\n",
       "      <td>0.171053</td>\n",
       "      <td>1.294852</td>\n",
       "      <td>0.016420</td>\n",
       "      <td>1.046988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>(Street food)</td>\n",
       "      <td>(Italian, Meat)</td>\n",
       "      <td>0.242736</td>\n",
       "      <td>0.235561</td>\n",
       "      <td>0.072107</td>\n",
       "      <td>0.297061</td>\n",
       "      <td>1.261079</td>\n",
       "      <td>0.014928</td>\n",
       "      <td>1.087490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>(Meat)</td>\n",
       "      <td>(Italian, Street food)</td>\n",
       "      <td>0.606431</td>\n",
       "      <td>0.106115</td>\n",
       "      <td>0.072107</td>\n",
       "      <td>0.118905</td>\n",
       "      <td>1.120525</td>\n",
       "      <td>0.007756</td>\n",
       "      <td>1.014515</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 antecedents               consequents  antecedent support  \\\n",
       "0                  (Italian)             (Street food)            0.421549   \n",
       "1              (Street food)                 (Italian)            0.242736   \n",
       "2       (Italian, Breakfast)                    (Meat)            0.179075   \n",
       "3            (Italian, Meat)               (Breakfast)            0.235561   \n",
       "4          (Breakfast, Meat)                 (Italian)            0.253586   \n",
       "5                  (Italian)         (Breakfast, Meat)            0.421549   \n",
       "6                (Breakfast)           (Italian, Meat)            0.457870   \n",
       "7                     (Meat)      (Italian, Breakfast)            0.606431   \n",
       "8   (Breakfast, Street food)                    (Meat)            0.110552   \n",
       "9          (Breakfast, Meat)             (Street food)            0.253586   \n",
       "10       (Street food, Meat)               (Breakfast)            0.132103   \n",
       "11               (Breakfast)       (Street food, Meat)            0.457870   \n",
       "12             (Street food)         (Breakfast, Meat)            0.242736   \n",
       "13                    (Meat)  (Breakfast, Street food)            0.606431   \n",
       "14    (Italian, Street food)                    (Meat)            0.106115   \n",
       "15           (Italian, Meat)             (Street food)            0.235561   \n",
       "16       (Street food, Meat)                 (Italian)            0.132103   \n",
       "17                 (Italian)       (Street food, Meat)            0.421549   \n",
       "18             (Street food)           (Italian, Meat)            0.242736   \n",
       "19                    (Meat)    (Italian, Street food)            0.606431   \n",
       "\n",
       "    consequent support   support  confidence      lift  leverage  conviction  \n",
       "0             0.242736  0.106115    0.251726  1.037037  0.003790    1.012014  \n",
       "1             0.421549  0.106115    0.437162  1.037037  0.003790    1.027739  \n",
       "2             0.606431  0.125550    0.701104  1.156115  0.016954    1.316741  \n",
       "3             0.457870  0.125550    0.532985  1.164054  0.017694    1.160842  \n",
       "4             0.421549  0.125550    0.495101  1.174479  0.018652    1.145675  \n",
       "5             0.253586  0.125550    0.297831  1.174479  0.018652    1.063012  \n",
       "6             0.235561  0.125550    0.274206  1.164054  0.017694    1.053245  \n",
       "7             0.179075  0.125550    0.207032  1.156115  0.016954    1.035255  \n",
       "8             0.606431  0.075880    0.686373  1.131825  0.008838    1.254897  \n",
       "9             0.242736  0.075880    0.299227  1.232725  0.014325    1.080612  \n",
       "10            0.457870  0.075880    0.574399  1.254504  0.015394    1.273801  \n",
       "11            0.132103  0.075880    0.165723  1.254504  0.015394    1.040299  \n",
       "12            0.253586  0.075880    0.312601  1.232725  0.014325    1.085854  \n",
       "13            0.110552  0.075880    0.125125  1.131825  0.008838    1.016658  \n",
       "14            0.606431  0.072107    0.679521  1.120525  0.007756    1.228065  \n",
       "15            0.242736  0.072107    0.306110  1.261079  0.014928    1.091330  \n",
       "16            0.421549  0.072107    0.545844  1.294852  0.016420    1.273682  \n",
       "17            0.132103  0.072107    0.171053  1.294852  0.016420    1.046988  \n",
       "18            0.235561  0.072107    0.297061  1.261079  0.014928    1.087490  \n",
       "19            0.106115  0.072107    0.118905  1.120525  0.007756    1.014515  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rules = association_rules(frequent_itemsets, metric=\"lift\", min_threshold=1)\n",
    "rules"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Support vs Confidence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plt.scatter(rules['support'], rules['confidence'], alpha=0.5)\n",
    "#plt.xlabel('support')\n",
    "#plt.ylabel('confidence')\n",
    "#plt.title('Support vs Confidence')\n",
    "#plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Support vs Lift"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plt.scatter(rules['support'], rules['lift'], alpha=0.5)\n",
    "#plt.xlabel('support')\n",
    "#plt.ylabel('lift')\n",
    "#plt.title('Support vs Lift')\n",
    "#plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Lift vs Confidence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fit = np.polyfit(rules['lift'], rules['confidence'], 1)\n",
    "#fit_fn = np.poly1d(fit)\n",
    "#plt.plot(rules['lift'], rules['confidence'], 'yo', rules['lift'], \n",
    "#fit_fn(rules['lift']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rules['antecedents'] = rules['antecedents'].apply(lambda a: ','.join(list(a)))\n",
    "rules['consequents'] = rules['consequents'].apply(lambda a: ','.join(list(a)))\n",
    "\n",
    "# Transform antecedent, consequent, and support columns into matrix\n",
    "support_table = rules.pivot(index='consequents', columns='antecedents', values='lift')\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.heatmap(support_table, annot=True, cbar=False)\n",
    "b, t = plt.ylim() \n",
    "b += 0.5 \n",
    "t -= 0.5 \n",
    "plt.ylim(b, t) \n",
    "plt.yticks(rotation=0)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Transform antecedent, consequent, and support columns into matrix\n",
    "support_table = rules.pivot(index='consequents', columns='antecedents', values='support')\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "sns.heatmap(support_table, annot=True, cbar=False)\n",
    "b, t = plt.ylim() \n",
    "b += 0.5 \n",
    "t -= 0.5 \n",
    "plt.ylim(b, t) \n",
    "plt.yticks(rotation=0)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
